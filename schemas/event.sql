-- Creating event schema, all event calendar related tables are stored here
CREATE SCHEMA event;
-- We will initiate the tables in the following order:
-- 1. event.events REFERENCES people.users
-- 2. event.signups REFERENCES event.events
-- 3. event.positions REFERENCES people.permissions
-- 4. event.crew REFERENCES event.signups, event.positions, people.users
-- 5. event.attendees REFERENCES event.events, people.users
--
-- Table creations
--
-- event.events is a single event available on the calendar, contains signup sheets
CREATE TABLE event.events (
    event_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_type text NOT NULL DEFAULT 'other',
    name text NOT NULL,
    start_date timestamptz NOT NULL,
    end_date timestamptz NOT NULL,
    description text NOT NULL,
    location text NOT NULL,
    is_private boolean NOT NULL DEFAULT false,
    is_cancelled boolean NOT NULL DEFAULT false,
    is_tentative boolean DEFAULT false,
    created_at timestamptz NOT NULL DEFAULT NOW(),
    created_by int REFERENCES people.users(user_id),
    updated_at timestamptz,
    updated_by int REFERENCES people.users(user_id),
    deleted_at timestamptz,
    deleted_by int REFERENCES people.users(user_id),
    CONSTRAINT namechk CHECK (char_length(name) <= 100),
    CONSTRAINT locationchk CHECK (char_length(location) <= 100)
);
COMMENT ON COLUMN event.events.event_type IS 'Can be show, meeting, social';
--
-- event.signups is a signup sheet for an event, contains the positions and who is signed up
CREATE TABLE event.signups (
    signup_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_id int NOT NULL REFERENCES event.events(event_id),
    title text NOT NULL,
    description text,
    unlock_date timestamptz,
    start_time time,
    end_time time,
    CONSTRAINT titlechk CHECK (char_length(title) <= 50)
);
--
-- event.positions is each position that is available for a signup sheet i.e. cam-op
CREATE TABLE event.positions (
    position_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    description text NOT NULL,
    admin boolean NOT NULL DEFAULT false,
    permission_id int REFERENCES people.permissions(permission_id),
    CONSTRAINT namechk CHECK (char_length(name) <= 40)
);
--
-- event.crew is the individual position on the signup sheet with the user.BIGINT
-- Whilst this is many to many we have an ID here since a signup can have multiple
-- of the same position
CREATE TABLE event.crews (
    crew_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    signup_id int REFERENCES event.signups(signup_id) ON UPDATE CASCADE ON DELETE CASCADE,
    position_id int REFERENCES event.positions(position_id) ON UPDATE CASCADE ON DELETE CASCADE,
    user_id int REFERENCES people.users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
    credited boolean NOT NULL DEFAULT TRUE,
    locked bool NOT NULL DEFAULT false,
    ordering int NOT NULL
);
--
-- event.attendees maps the many to many relationship for socials / meetings
CREATE TABLE event.attendees (
    event_id int REFERENCES event.events(event_id) ON UPDATE CASCADE ON DELETE CASCADE,
    user_id int REFERENCES people.users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
    attend_status text NOT NULL,
    CONSTRAINT attendees_pkey PRIMARY KEY (event_id, user_id)
);
--
-- Migrations
--
-- Migrate public.events to event.events
INSERT INTO event.events (
        event_id,
        event_type,
        name,
        start_date,
        end_date,
        description,
        location,
        is_private,
        is_cancelled,
        is_tentative,
        created_at,
        created_by
    )
SELECT id,
    event_type,
    name,
    start_date,
    (start_date::date + end_time::interval),
    COALESCE(description, ''),
    COALESCE(location, ''),
    is_private,
    is_cancelled,
    is_tentative,
    start_date,
    host_member_id
FROM public.events;
--
-- Migrate public.crew_positions to event.positions
-- We don't copy member_group_name since we are trying to move away
-- from permissions by the role/group and by an individual permission.
INSERT INTO event.positions (
        name,
        description,
        admin
    )
SELECT name,
    description,
    has_admin_rights
FROM public.crew_positions;
--
-- Migration public.event_signups to event.signups
INSERT INTO event.signups (
        signup_id,
        event_id,
        title,
        description,
        unlock_date,
        start_time,
        end_time
    )
SELECT id,
    COALESCE(event_id, 14),
    name,
    COALESCE(notes, ''),
    unlock_date,
    start_time,
    end_time
FROM public.event_signups;
--
-- Migration public.event_attendees to event.attendees
INSERT INTO event.attendees (event_id, user_id, attend_status)
SELECT event_id,
    member_id,
    attend_status::text
FROM public.event_attendees;
--
-- Migration public.event_signup_crew to event.crews
INSERT INTO event.crews (
        crew_id,
        signup_id,
        position_id,
        user_id,
        locked,
        ordering
    )
SELECT sc.id,
    sc.event_signup_id,
    pos.position_id,
    sc.member_id,
    sc.is_locked,
    sc.ordering
FROM public.event_signup_crew sc
    LEFT JOIN event.positions pos ON sc.crew_position_name = pos.name;