-- +goose Up
-- +goose StatementBegin
CREATE SCHEMA internal;
CREATE TABLE internal.calendar ();
-- Creating video schema, all video related tables stored here
CREATE SCHEMA video;
-- We will initate the tables in the following order,
-- in order to ensure that the foreign keys get setup:
-- 1. video.series
-- 2. video.items
-- 3. video.files
-- 4. video.playlists
-- 5. video.playlist_items
-- 6. video.presets
-- 7. video.encode_formats
-- 8. video.presets_encode_formats
-- Then migrate the data in the same order.
CREATE TABLE video.series (
    series_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    parent_series_id int REFERENCES video.series(series_id),
    name text,
    url text NOT NULL,
    description text,
    thumbnail text,
    tags text [],
    status text,
    series_position smallint,
    created_at timestamptz NOT NULL DEFAULT NOW(),
    created_by int,
    updated_at timestamptz,
    updated_by int,
    deleted_at timestamptz,
    deleted_by int
);
-- Name if null should fallback to use the URL.
-- Series position indicates its position in relation to
-- it's siblings.
INSERT INTO video.series (
        series_id,
        url,
        name,
        description,
        thumbnail,
        status
    )
SELECT id,
    url_name,
    display_name,
    description,
    image,
    CASE
        WHEN is_public THEN 'public'
        ELSE 'internal'
    END
FROM public.video_boxes;
-- video.items table stores every video
CREATE TABLE video.items (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    url text,
    description text,
    thumbnail text,
    duration interval,
    views int NOT NULL DEFAULT 0,
    genre int NOT NULL DEFAULT 0,
    tags text [],
    series int,
    series_position smallint,
    status text NOT NULL DEFAULT 'internal',
    preset int REFERENCES video.presets(id),
    broadcast_date timestamptz NOT NULL,
    created_at timestamptz NOT NULL DEFAULT NOW(),
    created_by int DEFAULT 0,
    updated_at timestamptz,
    updated_by int,
    deleted_at timestamptz,
    deleted_by int
);
CREATE TABLE video.files (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    video_id int NOT NULL REFERENCES video.items(id) uri text NOT NULL,
    status text,
    encode_format int NOT NULL REFERENCES video.encode_formats(id)
);
COMMENT ON TABLE video.files IS 'Supporting video files for a video item';
COMMENT ON TABLE video.files.status IS 'Indicates status of the file i.e. available, internal, error';
CREATE TABLE video.playlists (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    description text,
    thumbnail text,
    status text NOT NULL DEFAULT 'internal',
    created_at timestamptz NOT NULL,
    created_by int NOT NULL,
    updated_at timestamptz,
    updated_by int,
    deleted_at timestamptz,
    deleted_by int
);
CREATE TABLE video.playlist_items (
    playlist_id int REFERENCES video.playlist(id) ON UPDATE CASCADE ON DELETE CASCADE,
    video_item_id REFERENCES video.items(id) ON UPDATE CASCADE,
    CONSTRAINT video.playlists_items_pkey PRIMARY KEY (playlist_id video_item_id)
);
-- The files each have an encode_format that is used to convert the
-- source file using the encode_format params to create the file.
-- A video item can have a preset selected which will generate
-- A group of encode_formats for a video, this saves time since
-- we can specify once that we need these specific qualities and
-- all videos will follow that rule.
CREATE TABLE video.presets (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    description text,
);
CREATE TABLE video.encode_formats (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description text,
    arguements text NOT NULL,
    watermarked bool NOT NULL
);
CREATE TABLE video.presets_encode_formats (
    preset_id int REFERENCES video.preset(id) ON UPDATE CASCADE ON DELETE CASCADE,
    encode_format_id REFERENCES video.encode_formats(id) ON UPDATE CASCADE,
    CONSTRAINT video.presets_encode_formats_pkey PRIMARY KEY (preset_id encode_format_id)
);
-- Migrations
-- Migration from public.videos to video.items
INSERT INTO video.items (
        id,
        name,
        url,
        description,
        duration,
        tags,
        series,
        series_position,
        status,
        broadcast_date,
        created_at,
        created_by
    )
SELECT id,
    display_name,
    url_name,
    description,
    duration,
    regexp_split_to_array(keywords, ' '),
    video_box_id,
    ordering,
    CASE
        WHEN is_enabled THEN 'public'
        ELSE 'internal'
    END,
    created_date,
    created_date,
    created_by
FROM public.videos;
-- +goose StatementEnd
-- +goose Down
-- +goose StatementBegin
CREATE TYPE public.video_mode AS ENUM (
    'watch',
    'watch-webM',
    'download',
    'HQdownload',
    'HDdownload',
    'schedule',
    'none',
    'thumbs'
);
ALTER TYPE public.video_mode OWNER TO ystvweb;
CREATE TABLE public.video_boxes (
    id integer NOT NULL,
    left_value smallint NOT NULL,
    right_value smallint NOT NULL,
    url_name character varying(50) NOT NULL,
    display_name character varying(100),
    use_in_url boolean DEFAULT true NOT NULL,
    description text,
    image character varying(50),
    is_enabled boolean DEFAULT true NOT NULL,
    is_public boolean DEFAULT true NOT NULL,
    ordering_type public.box_ordering NOT NULL,
    is_production boolean DEFAULT false NOT NULL,
    name character varying(50),
    ordering_type_boxes public.box_ordering NOT NULL,
    is_visible_in_latest_videos boolean DEFAULT true NOT NULL
);
ALTER TABLE public.video_boxes OWNER TO ystvweb;
CREATE TABLE public.video_file_types (
    name character varying(30) NOT NULL,
    extension character varying(5) NOT NULL,
    width smallint NOT NULL,
    height smallint NOT NULL,
    icon_image character varying(50),
    media_type character varying(30) NOT NULL,
    mode public.video_mode NOT NULL,
    description text,
    ordering smallint NOT NULL,
    vft_dest_type character varying(255),
    CONSTRAINT video_file_types_mode_key UNIQUE (mode, ordering),
    CONSTRAINT video_file_types_pkey PRIMARY KEY (name),
    CONSTRAINT video_file_types_ordering_check CHECK ((ordering > 0))
);
ALTER TABLE public.video_file_types OWNER TO ystvweb;
CREATE TABLE public.video_files (
    video_id integer NOT NULL,
    video_file_type_name character varying(30) NOT NULL,
    filename character varying(100) NOT NULL,
    is_enabled boolean DEFAULT true NOT NULL,
    comments text,
    id integer NOT NULL,
    size bigint
);
ALTER TABLE public.video_files OWNER TO ystvweb;
CREATE TABLE public.videos (
    id integer NOT NULL,
    video_box_id integer NOT NULL,
    display_name character varying(50),
    url_name character varying(50) NOT NULL,
    description text,
    ordering smallint,
    duration interval,
    created_date timestamp with time zone NOT NULL,
    created_by integer,
    is_enabled boolean DEFAULT false NOT NULL,
    search_index_data tsvector,
    keywords text,
    redirect_id integer,
    CONSTRAINT videos_ordering_check CHECK ((ordering > 0))
);
ALTER TABLE public.videos OWNER TO ystvweb;
ALTER TABLE ONLY public.video_boxes
ADD CONSTRAINT video_boxes_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.video_files
ADD CONSTRAINT video_files_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.videos
ADD CONSTRAINT videos_pkey PRIMARY KEY (id);
-- +goose StatementEnd